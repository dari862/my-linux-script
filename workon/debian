#! /bin/bash
function change_timezone {
  TIMEZONE="UTC"
  res=""

  res="$(timedatectl list-timezones | \
         fzf --layout=reverse \
             --header="Select time zone ('ESC' for default: ${TIMEZONE})" || true)"
  clear

  if [ -n "${res}" ]; then
    TIMEZONE="${res}"
    echo "Using ${TIMEZONE@Q} as time zone."
    sudo timedatectl set-timezone ${TIMEZONE@Q}
  else
    echo "Using default time zone ${TIMEZONE@Q}."
  fi
}

function change_locale {
  local LOCALE="en_US.UTF-8"
  local CHARSET="UTF-8"
  local res
  
  res="$(sed -n "s,^#\?\ \?\([[:alnum:]\.@_\-]\+\)\ \([[:alnum:]\-]\+\)\ *$,\1 \2,p" /etc/locale.gen | \
         fzf --layout=reverse \
             --header="Select locale ('ESC' for default: ${LOCALE})" || true)"
  clear

  if [ -n "${res}" ]; then
    LOCALE="$(echo "${res}" | cut -d" " -f1)"
    CHARSET="$(echo "${res}" | cut -d" " -f2)"
    sed -i "/^#\ \?${LOCALE} ${CHARSET}/s/^#\ \?//" /etc/locale.gen
    locale-gen
    echo "LANG=${LOCALE}" > /etc/locale.conf
    echo "KEYMAP=${LOCALE}" > /etc/vconsole.conf
  else
    show_info "Using default locale ${LOCALE@Q}."
    show_info "Using default charset ${CHARSET@Q}."
  fi
}

function install_timed_backgrounds {
https://github.com/adi1090x/dynamic-wallpaper
https://github.com/saint-13/Linux_Dynamic_Wallpapers

}

grubdefault="/etc/default/grub"
function invert_brightness {
  if [ -f "${grubdefault}" ]; then
    local oldline
    local bootparams
    oldline=$(grep ^GRUB_CMDLINE_LINUX= "${grubdefault}")
    bootparams=$(echo "${oldline}" | sed -n "s/^GRUB_CMDLINE_LINUX=\"\(.*\)\"/\1/p")
    show_header "Inverting display brightness (Intel i915)."
    if [[ ${bootparams} =~ i915.invert_brightness= ]]; then
      sudo sed -i "s|i915.invert_brightness=\(on\|off\|1\|0\)|i915.invert_brightness=1|g" ${grubdefault}
    else
      if test "${bootparams}"; then
        sudo sed -i "s|${bootparams}|${bootparams} i915.invert_brightness=1|g" ${grubdefault}
      else
        sudo sed -i "s|${oldline}|GRUB_CMDLINE_LINUX=\"i915.invert_brightness=1\"|g" ${grubdefault}
      fi
      sudo sed -i "\|^GRUB_CMDLINE_LINUX=| a\#${oldline}" ${grubdefault} # backup
      show_success "Brightness inverted."
      sudo update-grub
    fi
  fi
  if [[ "$(sudo bootctl is-installed)" = yes ]]; then
    local cmdline
    for entry in "$(bootctl -p)"/loader/entries/*.conf; do
      cmdline=$(sed -n "s/^options\s\+\(.*\)/\1/p" "${entry}")
      if [[ ${cmdline} =~ i915.invert_brightness= ]]; then
        sudo sed -i "s|i915.invert_brightness=\(1\|0\)|i915.invert_brightness=1|g" "${entry}"
      else
        if test "${cmdline}"; then
          sudo sed -i "s|${cmdline}|${cmdline} i915.invert_brightness=1|g" ${grubdefault}
        else
          echo "options	i915.invert_brightness=1" | sudo tee -a "${entry}"
        fi
      fi
    done
  fi
}

grubdefault="/etc/default/grub"
grubcfg="/boot/grub/grub.cfg"
function enable_intel_iommu {
  local vendor
  vendor="$(lscpu | sed -n "s,^Vendor ID: \+\([A-Za-z]\+\),\1,p")"
  if [[ "$vendor" =~ "Intel" ]]; then
    show_info "Setting Intel IOMMU kernel parameter."
    if [ -f "${grubdefault}" ]; then
      local oldline
      local bootparams
      oldline=$(grep ^GRUB_CMDLINE_LINUX= "${grubdefault}")
      bootparams=$(echo "${oldline}" | sed -n "s/^GRUB_CMDLINE_LINUX=\"\(.*\)\"/\1/p")
      if [[ ${bootparams} =~ intel_iommu= ]]; then
        sudo sed -i "s|intel_iommu=\(on\|off\|0\|1\)|intel_iommu=on|g" ${grubdefault}
      else
        if test "${bootparams}"; then
          sudo sed -i "s|${bootparams}|${bootparams} intel_iommu=on|g" ${grubdefault}
        else
          sudo sed -i "s|${oldline}|GRUB_CMDLINE_LINUX=\"intel_iommu=on\"|g" ${grubdefault}
        fi
        sudo sed -i "\|^GRUB_CMDLINE_LINUX=| a\#${oldline}" ${grubdefault} # backup
        sudo grub-mkconfig -o ${grubcfg}
      fi
    fi
    if [[ "$(sudo bootctl is-installed)" = yes ]]; then
      local cmdline
      for entry in "$(bootctl -p)"/loader/entries/*.conf; do
        cmdline=$(sed -n "s/^options\s\+\(.*\)/\1/p" "${entry}")
        if [[ ${cmdline} =~ intel_iommu= ]]; then
          sudo sed -i "s|intel_iommu=\(1\|0\)|intel_iommu=on|g" "${entry}"
        else
          if test "${cmdline}"; then
            sudo sed -i "s|${cmdline}|${cmdline} intel_iommu=on|g" ${grubdefault}
          else
            echo "options	intel_iommu=on" | sudo tee -a "${entry}"
          fi
        fi
      done
    fi
  else
    show_warning "Cannot set intel_iommu=on on non-Intel CPU. Skipping."
  fi
}

pulseconfig="/etc/pulse/default.pa"
function disable_pulseaudio_suspend {
  show_header "Disabling suspend on PulseAudio when sinks/sources idle."
  if [ -f ${pulseconfig} ]; then
    sudo sed -i "s/^load-module module-suspend-on-idle$/#load-module module-suspend-on-idle/g" ${pulseconfig}
  else
    show_warning "PulseAudio config file missing. Exiting."
  fi
}

iwlwificonf="/etc/modprobe.d/iwlwifi.conf"
function disable_11n {
  show_header "Disabling 802.11n networking in iwlwifi."
  if ! [ "$(ls -A /etc/modprobe.d/)" ]; then
    sudo sh -c "echo 'options iwlwifi 11n_disable=1' >> ${iwlwificonf}"
  else
    if ! find /etc/modprobe.d/ -type f \
         -exec grep "^options iwlwifi .*11n_disable=1.*" {} + >/dev/null 2>&1; then
      sudo sh -c "echo 'options iwlwifi 11n_disable=1' >> ${iwlwificonf}"
    else
      show_info "11n_disable=1 flag is already set."
    fi
  fi
  show_success "802.11n networking disabled in ${iwlwificonf}."
}

##################################################################################################
##################################################################################################
##################################################################################################
##################################################################################################
##################################################################################################
##################################################################################################
##################################################################################################
##################################################################################################

# Install fixed libxft library to /usr/lib/
function install_libxft() {
cd /tmp/
git clone https://github.com/uditkarode/libxft-bgra
cd libxft-bgra/
sh autogen.sh --sysconfdir=/etc --prefix=/usr --mandir=/usr/share/man
sudo make install

# Link fixed files
sudo rm /usr/lib/x86_64-linux-gnu/libXft.so.2.3.3 || true
sudo rm /usr/lib/x86_64-linux-gnu/libXft.so.2 || true
sudo rm /usr/lib/x86_64-linux-gnu/libXft.so || true

sudo ln -s /usr/lib/libXft.so.2.3.3 /usr/lib/x86_64-linux-gnu/libXft.so.2.3.3
sudo ln -s /usr/lib/libXft.so.2.3.3 /usr/lib/x86_64-linux-gnu/libXft.so.2
sudo ln -s /usr/lib/libXft.so.2.3.3 /usr/lib/x86_64-linux-gnu/libXft.so
}

function install_librewolf() {

echo "deb [arch=amd64] http://deb.librewolf.net $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/librewolf.list

sudo wget https://deb.librewolf.net/keyring.gpg -O /etc/apt/trusted.gpg.d/librewolf.gpg

sudo apt update

sudo apt install librewolf -y
 }

networking="${dir}/packages/network.list"
nmconf="/etc/NetworkManager/NetworkManager.conf"
function install_network {
  show_header "Setting up networking."
  check_installed "${networking}"
  check_fail
  show_success "Networking applications installed."

  show_info "Setting up MAC address randomization in Network Manager."
  if ! test "$(grep "mac-address=random" ${nmconf})"; then
    sudo sh -c "echo "" >> ${nmconf}"
    sudo sh -c "echo '# Enabling built-in MAC Address randomization' >> ${nmconf}"
    sudo sh -c "echo '[connection-mac-randomization]' >> ${nmconf}"
    sudo sh -c "echo 'wifi.cloned-mac-address=random' >> ${nmconf}"
    sudo sh -c "echo 'ethernet.cloned-mac-address=random' >> ${nmconf}"
  fi

  show_info "Disabling SSH root login and forcing SSH v2."
  sudo sed -i \
    -e "/^#PermitRootLogin prohibit-password$/a PermitRootLogin no" \
    -e "/^#Port 22$/i Protocol 2" \
    /etc/ssh/sshd_config
}

discovery="${dir}/packages/discover.list"
nsconf="/etc/nsswitch.conf"
function install_discovery {
  show_header "Setting up local network discovery."
  check_installed "${discovery}"
  check_fail
  show_success "Discovery applications installed."

  show_info "Enabling local hostname resolution in Avahi."
  local oldhostsline="hosts: files mymachines myhostname resolve \[!UNAVAIL=return\] dns"
  local newhostsline="hosts: files mymachines myhostname mdns_minimal \[NOTFOUND=return\] resolve \[!UNAVAIL=return\] dns"
  sudo sed -i "/^${oldhostsline}/s/^${oldhostsline}/${newhostsline}/g" ${nsconf}
  sudo systemctl enable avahi-daemon.service
  sudo systemctl start avahi-daemon.service
}

tor="${dir}/packages/tor.list"
function install_tor {
  show_header "Installing Tor programs."
  check_installed "${tor}"
  check_fail
  show_success "Tor installed."

  show_info "Enabling and starting tor service."
  sudo systemctl enable tor
  sudo systemctl start tor
}

srclist="/etc/apt/sources.list"
function use_onion_repos {
  show_header "Tunneling apt over tor for Debian $(lsb_release -sc)."

  local is_contrib
  grep -q contrib ${srclist}; is_contrib=$?
  local is_nonfree
  grep -q non-free ${srclist}; is_nonfree=$?

  local release
  release=$(lsb_release -sc)
  sudo cp -f ${srclist} ${srclist}.${RANDOM}.bak
  sudo cp -f "${dir}/sources/${release}-sources.list" ${srclist}

  [ ${is_contrib} == 0 ] && \
    sudo sed -i "s,\(.* ${release} main.*\)$,\1 contrib,g" ${srclist} && \
    sudo sed -i "s,\(.* ${release}-updates main.*\)$,\1 contrib,g" ${srclist}
    sudo sed -i "s,\(.* ${release}-backports main.*\)$,\1 contrib,g" ${srclist}
  [ ${is_nonfree} == 0 ] && \
    sudo sed -i "s,\(.* ${release} main.*\)$,\1 non-free,g" ${srclist} && \
    sudo sed -i "s,\(.* ${release}-updates main.*\)$,\1 non-free,g" ${srclist}
    sudo sed -i "s,\(.* ${release}-backports main.*\)$,\1 non-free,g" ${srclist}
  sudo sed -i "s,https://deb.debian.org,tor+http://vwakviie2ienjx6t.onion,g" ${srclist}
  sudo sed -i "s,https://security.debian.org/,tor+http://sgvtcaew4bxjd7ln.onion/debian-security/,g" ${srclist}

  sudo apt update
}


##################################################################################################
##################################################################################################
##################################################################################################
##################################################################################################
##################################################################################################
##################################################################################################
##################################################################################################
##################################################################################################


apps="${dir}/packages/apps.list"
mpvconfig="${dir}/configs/mpv.conf"
libaoconf="/etc/libao.conf"
function install_apps {
  show_header "Installing desktop applications."
  check_installed "${apps}"
  check_fail
  show_success "Applications installed."

  show_info "Copying mpv config."
  mkdir -p "${HOME}/.config/mpv"
  cp -f "${mpvconfig}" "${HOME}/.config/mpv"

  show_info "Updating xdg settings to open HTML files in Firefox."
  xdg-mime default firefox.desktop text/html

  # Should always pass because gufw is in the app list.
  if command -v ufw >/dev/null; then
    show_info "Enabling Syncthing firewall rules."
    sudo ufw allow syncthing
    sudo ufw allow syncthing-gui
  fi

  show_info "Configuring ${libaoconf} to use PulseAudio instead of ALSA."
  sudo sh -c "echo 'default_driver=pulse' > ${libaoconf}"
}

torbrowser_path="${HOME}/.local/share/tor-browser"
local_applications="${HOME}/.local/share/applications"
function install_torbrowser {
  show_header "Installing Tor browser."

  local response
  local install_torbrowser
  if [ -d "${torbrowser_path}" ]; then
    show_warning "Tor browser is already installed in ${torbrowser_path}."
    response=$(ask_question "Replace? (y/N)")
    if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
      install_torbrowser=true
    else
      install_torbrowser=false
    fi
  else
    install_torbrowser=true
  fi

  if ${install_torbrowser}; then
    local torbrowser_version
    local torbrowser_package
    local torbrowser_url="https://www.torproject.org/dist/torbrowser"
    local arch

    show_info "Downloading Tor developers' GPG key."
    gpg --auto-key-locate nodefault,wkd --locate-keys torbrowser@torproject.org

    torbrowser_version=$(curl https://www.torproject.org/download/ | \
                         sed -n 's,^ \+<a class="downloadLink" href="/dist/torbrowser/\([0-9\.]\+\)/tor-browser-linux.*">,\1,p')
    arch=$(uname -m)
    if [ "${arch:(-2)}" = "86" ]; then
      torbrowser_package=tor-browser-linux32-${torbrowser_version}_en-US.tar.xz
    elif [ "${arch:(-2)}" = "64" ]; then
      torbrowser_package=tor-browser-linux64-${torbrowser_version}_en-US.tar.xz
    fi

    show_info "Downloading release tarball."
    wget "${torbrowser_url}/${torbrowser_version}/${torbrowser_package}"
    wget "${torbrowser_url}/${torbrowser_version}/${torbrowser_package}.asc"
    show_info "Extracting..."
    gpg --verify "${torbrowser_package}.asc" "${torbrowser_package}"
    tar xf "${torbrowser_package}"

    show_info "Putting things into place..."
    mkdir -p "${local_applications}"
    rm -rf "${torbrowser_path}"
    mv tor-browser_en-US "${torbrowser_path}"
    cp -f "${torbrowser_path}/start-tor-browser.desktop" "${local_applications}/"
    chmod -x "${local_applications}/start-tor-browser.desktop"
    sed -i \
      -e "s,^Name=.*,Name=Tor Browser,g" \
      -e "s,^Icon=.*,Icon=browser-tor,g" \
      -e "s,^Exec=.*,Exec=sh -c '\"${torbrowser_path}/Browser/start-tor-browser\" --detach || ([ !  -x \"${torbrowser_path}/Browser/start-tor-browser\" ] \&\& \"\$(dirname \"\$*\")\"/Browser/start-tor-browser --detach)' dummy %k,g" \
      "${local_applications}/start-tor-browser.desktop"
    update-desktop-database "${local_applications}"

    show_info "Cleaning up..."
    rm -f "${torbrowser_package}"
    rm -f "${torbrowser_package}.asc"
    show_success "Tor browser installed."
  else
    show_info "Skipping..."
  fi
}

virtualbox="${dir}/packages/virtualbox.list"
function install_virtualbox {
  show_header "Installing VirtualBox."
  check_installed "${virtualbox}"
  check_fail
  show_success "VirtualBox installed."

  if getent group vboxusers; then
    show_info "Adding $(whoami) to vboxusers group."
    sudo usermod -aG vboxusers "$(whoami)"
  fi
}

virtualboxguest="${dir}/packages/virtualbox-guest.list"
function install_virtualbox_guest {
  if grep "^flags.*\ hypervisor" /proc/cpuinfo >/dev/null 2>&1; then
    show_header "Installing packages for VirtualBox guests."
    check_installed "${virtualboxguest}"
    check_fail
    show_success "VirtualBox guest packages installed."
  else
    show_warning "Not running on a virtualized machine. Skipping."
  fi
}

wine="${dir}/packages/wine.list"
function install_wine {
  show_header "Installing wine."
  check_installed "${wine}"
  check_fail
  show_success "Wine installed."
}


##################################################################################################
##################################################################################################
##################################################################################################
##################################################################################################
##################################################################################################
##################################################################################################
##################################################################################################
##################################################################################################


function android_list(){
adb
android-libandroidfw
android-libcutils
android-libdex
android-libetc1
android-libext4-utils
android-tools-fsutils
f2fs-tools
fastboot
go-mtpfs
heimdall-flash
libmtp9
mmc-utils
}
#######################

function codecs_list(){
gstreamer1.0-libav
gstreamer1.0-plugins-bad
gstreamer1.0-plugins-base
gstreamer1.0-plugins-good
gstreamer1.0-plugins-ugly
}
#######################

function discover_list(){
avahi-autoipd
avahi-daemon
avahi-discover
gvfs
libnss-mdns
}
#######################

function extra_list(){
calibre
gifsicle
gimp
recordmydesktop
subtitleeditor
}
#######################

function firmware_list(){
amd64-microcode
bluez-firmware
firmware-iwlwifi
firmware-linux
firmware-linux-free
firmware-linux-nonfree
intel-microcode
}
#######################

function games_list(){
desmume
dolphin-emu
higan
mupen64plus
visualboyadvance-gtk
}
#######################

function network_list(){
iwd
openssh-server
wireguard-tools
wireless-tools
}
#######################

function printer_list(){
cups
cups-pk-helper
foomatic-db
foomatic-db-compressed-ppds
foomatic-db-engine
foomatic-filters
gutenprint
hplip
hplip-gui
printer-driver-gutenprint
system-config-printer
}
#######################

function tor_list(){
apt-transport-tor
onionshare
tor
torsocks
}
#######################

function utils_list(){
acpi
bc
cpio
dmidecode
dos2unix
dosfstools
encfs
ethtool
exfat-utils
gddrescue
gdisk
gnupg
hfsprogs
libbcprov-java
libcommons-lang3-java
libnotify-bin
lm-sensors
mtools
net-tools
nmap
ntfs-3g
nvme-cli
p7zip
parallel
parted
pdftk
pigz
pixz
pv
reiserfsprogs
rkhunter
rsync
screen
signify-openbsd
squashfs-tools
s-tui
time
tmux
unhide
unrar-free
usbutils
zip
zstd
}
#######################

packages_list="
firmware-linux-free
firmware-linux-nonfree
firmware-iwlwifi
firmware-realtek
libx11-dev
libxft-dev
libxinerama1
libxinerama-dev
network-manager
curl
wget
apt-transport-https
dirmngr
rsync
dmenu
python3
autoconf
suckless-tools
xorg
software-properties-common
cmake
fonts-font-awesome
fonts-roboto
devscripts
file-roller
feh
build-essential
gtk2-engines-murrine
gtk2-engines
vim
caca-utils
highlight
atool
w3m
poppler-utils
mediainfo
compton
python3-pip
libcanberra-gtk-module
libgtk2.0-dev
libgtk-3-dev
gnome-devel
imagemagick
nnn
tig
htop
mesa-utils
mesa-utils-extra
emacs
xsel
bluez-cups
blueman
gpick
tree
ninja-build
gettext
libtool-bin
g++
unzip
jq
nmap
thunderbird
ack
neofetch
crda
net-tools
npm
python
picom
xutils-dev
libx11-xcb-dev
libxcb-res0-dev
thunar
git
dbus-x11
pavucontrol
tldr
liblz4-tool
xclip
libnotify-dev
libxss-dev
keepassxc
python3-venv
tcpdump
gparted
"


##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################


  C5 "Slack" off
  # D: Development
  D3 "GO" off
  D4 "Microsoft Visual Studio Code" off
  D5 "IntelliJ IDEA Ultimate" off
  D6 "GoLand" off
  D7 "Postman" off
  D8 "Docker" off
  D9 "Maven" off
  D12 "PyCharm" off
  D13 "Robo 3T" off
  D14 "DataGrid" off
  D15 "Mongo Shell & MongoDB Database Tools" off
  # F: Utility
  F1 "Dropbox" off
  F3 "Virtualbox" off
)

  C5)
    snap install slack --classic
    ;;
  D3)
    wget https://go.dev/dl/go1.18.linux-amd64.tar.gz
    rm -rf /usr/local/go && tar -C /usr/local -xzf go1.18.linux-amd64.tar.gz
    echo ' ' >> $HOME/.profile
    echo '# GoLang configuration ' >> $HOME/.profile
    echo 'export PATH="$PATH:/usr/local/go/bin"' >> $HOME/.profile
    echo 'export GOPATH="$HOME/go"' >> $HOME/.profile
    source $HOME/.profile
    ;;
  D4)
    wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
    install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
    sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list'
    rm -f packages.microsoft.gpg
    apt install apt-transport-https
    apt update
    apt install code # or code-insiders
    ;;
  D5)
    wget https://download.jetbrains.com/idea/ideaIU-2021.3.3.tar.gz
    tar -xzf ideaIU-2021.3.3.tar.gz -C /opt
    ln -s /opt/idea-IU-213.7172.25/bin/idea.sh /usr/local/bin/idea
    echo "[Desktop Entry]
          Version=1.0
          Type=Application
          Name=IntelliJ IDEA Ultimate Edition
          Icon=/opt/idea-IU-213.7172.25/bin/idea.svg
          Exec=/opt/idea-IU-213.7172.25/bin/idea.sh %f
          Comment=Capable and Ergonomic IDE for JVM
          Categories=Development;IDE;
          Terminal=false
          StartupWMClass=jetbrains-idea
          StartupNotify=true" >> /usr/share/applications/jetbrains-idea.desktop
    ;;
  D6)
    wget https://download.jetbrains.com/go/goland-2022.1.2.tar.gz
    tar -xzf goland-2022.1.2.tar.gz -C /opt
    ln -s /opt/GoLand-2022.1.2/bin/goland.sh /usr/local/bin/goland
    echo "[Desktop Entry]
          Version=1.0
          Type=Application
          Name=GoLand
          Icon=/opt/GoLand-2022.1.2/bin/goland.png
          Exec=/opt/GoLand-2022.1.2/bin/goland.sh
          Terminal=false
          Categories=Development;IDE;" >> /usr/share/applications/jetbrains-goland.desktop
    ;;
  D7)
    curl https://dl.pstmn.io/download/latest/linux64 --output postman-9.20.3-linux-x64.tar.gz
    tar -xzf postman-9.20.3-linux-x64.tar.gz -C /opt
    echo "[Desktop Entry]
          Encoding=UTF-8
          Name=Postman
          Exec=/opt/Postman/app/Postman %U
          Icon=/opt/Postman/app/resources/app/assets/icon.png
          Terminal=false
          Type=Application
          Categories=Development;" >> /usr/share/applications/Postman.desktop
    ;;
  D8)
    apt-get install \
        apt-transport-https \
        ca-certificates \
        curl \
        gnupg \
        lsb-release
    curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo \
      "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \
      $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    apt-get update
    apt-get -y install docker-ce docker-ce-cli containerd.io
    docker run hello-world

    groupadd docker
    usermod -aG docker $USER
    curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
    ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
    docker-compose --version
    ;;
  D9)
    wget https://dlcdn.apache.org/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz
    tar -zxvf apache-maven-3.6.3-bin.tar.gz
    mkdir /opt/maven
    mv ./apache-maven-3.6.3 /opt/maven/
    echo ' ' >> $HOME/.profile
    echo '# Maven Configuration' >> $HOME/.profile
    echo 'JAVA_HOME=/usr/lib/jvm/default-java' >> $HOME/.profile
    echo 'export M2_HOME=/opt/maven/apache-maven-3.6.3' >> $HOME/.profile
    echo 'export PATH=${M2_HOME}/bin:${PATH}' >> $HOME/.profile
    source $HOME/.profile
    ;;
  D12)
    snap install pycharm-community --classic
    ;;
  D13)
    snap install robo3t-snap
    ;;
  D14)
    wget https://download.jetbrains.com/datagrip/datagrip-2022.1.5.tar.gz
    tar -xzf datagrip-2022.1.5.tar.gz -C /opt
    ln -s /opt/DataGrip-2022.1.5/bin/datagrip.sh /usr/local/bin/datagrip
    cd /opt/DataGrip-2022.1.5/bin
    ./datagrip.sh
    ;;
  D15)
    wget -O mongosh.deb https://downloads.mongodb.com/compass/mongodb-mongosh_1.2.2_amd64.deb
    dpkg -i ./mongosh.deb

    wget -O mongodb-database-tools.deb https://fastdl.mongodb.org/tools/db/mongodb-database-tools-debian92-x86_64-100.5.2.deb
    dpkg -i ./mongodb-database-tools.deb
    ;;

  F1)
    wget -O dropbox.deb https://www.dropbox.com/download?dl=packages/ubuntu/dropbox_2020.03.04_amd64.deb
    apt -y install ./dropbox.deb
    ;;
  F3)
    add-apt-repository "deb [arch=amd64] https://download.virtualbox.org/virtualbox/debian bullseye contrib"
    wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | apt-key add -
    wget -q https://www.virtualbox.org/download/oracle_vbox.asc -O- | apt-key add -
    apt-get update
    apt-get -y install virtualbox-6.1


###############################################################################################################
###############################################################################################################
###############################################################################################################
###############################################################################################################

	# Update tldr database
	tldr -u
	
	### Git env
	git config --global user.email "Felixs.Developer@tutanota.com"
	git config --global user.name "FancyChaos"
	
	# Generate new ssh keys without a password
	ssh-keygen -q -f $HOME/.ssh/git_key -t ecdsa -b 521 -N ""
	
	### Fix broken packages for good measure (why not?)
	sudo apt install -f -y
	
	# Disable tracker (Data indexing for GNOME mostly)
	systemctl --user mask tracker-store.service tracker-miner-fs.service tracker-miner-rss.service tracker-extract.service tracker-miner-apps.service tracker-writeback.service
	systemctl --user mask gvfs-udisks2-volume-monitor.service gvfs-metadata.service gvfs-daemon.service
