#!/bin/bash
#===================================================================================
# UPDATE NOTIFICATION
# FILE: update_notification
#
# DESCRIPTION: Checks apt updates and show it to user in tint2 taskbar
#
# AUTHOR: Leonardo Marco
# VERSION: 1.0
# CREATED: 15.10.2017 
# LAST-UPDATE: 15.10.2017
# LICENSE: GNU General Public License v3.0
#===================================================================================

# CONFIG
updates_file="/var/cache/update-notification"
install_file="/usr/bin/$(basename $0)" 
cron_when="daily"								# weekly | monthly | daily | hourly
NOTIFY_ICON=/usr/share/icons/Papirus/32x32/apps/system-software-update.svg

get_total_updates() { UPDATES=$(cat "$updates_file" | wc -l); }


#=== FUNCTIONs ==================================================================
# NAME: Massage system
# all Bold
#===============================================================================

plain() {
	#no color
	(( QUIET )) && return
	local mesg=$1; shift
	printf "\e[1;1m    ${mesg}\e[1;0m\n" "$@" >&1
}

msg() {
	# green
	(( QUIET )) && return
	local mesg=$1; shift
	printf "\e[1;1m\e[1;32m==>\e[1;0m\e[1;1m ${mesg}\e[1;0m\n" "$@" >&1
}

msg2() {
	# blue
	(( QUIET )) && return
	local mesg=$1; shift
	printf "\e[1;1m\e[1;34m  ->\e[1;0m\e[1;1m ${mesg}\e[1;0m\n" "$@" >&1
}

ask() {
	# blue
	local mesg=$1; shift
	printf "\e[1;1m\e[1;34m::\e[1;0m\e[1;1m ${mesg}\e[1;0m" "$@" >&1
}

warning() {
	# yellow
	local mesg=$1; shift
	printf "\e[1;1m\e[1;33m==> $(gettext "WARNING:")\e[1;0m\e[1;1m ${mesg}\e[1;0m\n" "$@" >&2
}

error() {
	# red
	local mesg=$1; shift
	printf "\e[1;1m\e[1;31m==> $(gettext "ERROR:")\e[1;0m\e[1;1m ${mesg}\e[1;0m\n" "$@" >&2
}


#=== FUNCTION ==================================================================
# NAME: update
# DESCRIPTION: make apt update and and check new packages updates and save the list in $updates_file
#===============================================================================
function update () {
	# If no update today exec update
	if ! [ "$(find /var/cache/apt/pkgcache.bin -mtime 0 2>/dev/null)" ]; then
		# CHECK INTERNET CONNECTION
		plain "Checking Internet connection..."
		ping -c 1 8.8.8.8 &>/dev/null || exit 1

		# REPOSITORY UPDATE-NOTIFICATION
		plain "Updating package repositoriy..."
		apt-get update &> /dev/null
	fi
	
	plain "Checking updates and saving in $updates_file..."
	printf "" > "$updates_file" 
	for i in $(apt list --upgradable -a  2>/dev/null | awk -F/ '{print $1}' | grep -v Listing... | uniq)
	do 
		dpkg -l | grep -e "$i" >> $updates_file
	done

	# No updates
	if [ ! -s "$updates_file" ]; then
		msg "NO PENDING UPDATES"
	# Pending updates
	else
		warning "PENDING UPDATES"
		cat "$updates_file"
	fi
}


#=== FUNCTION ==================================================================
# NAME: update
# DESCRIPTION: make apt upgrade interactive
#===============================================================================
function interactive_upgrade() {
	update
	echo
	[ ! -s "$updates_file" ] && exit 0

	warning "You are about to upgrade your system."
	read -p "Press enter to continue upgrade..."
	echo
	
	[ "$(id -u)" -eq 0 ] && apt-get -y full-upgrade || sudo apt-get -y full-upgrade
	if ! [ $? -eq 0 ]; then 
		read; 
		exit 1; 
	fi

	echo -n "" > "$updates_file"
	
	echo
	read -p "Update complete!"
	exit
}

#=== FUNCTION ==================================================================
# NAME: notifcation system
# DESCRIPTION: shot text for display in systray
#===============================================================================
function tint2_executor_msg {
	if [ -s "$updates_file" ]
	then
	    get_total_updates
	    # notify user of updates
	    if hash notify-send &>/dev/null; then
		if (( UPDATES > 50 )); then
		    notify-send -u critical -i $NOTIFY_ICON \
			"You really need to update!!" "$UPDATES New packages"
		elif (( UPDATES > 25 )); then
		    notify-send -u normal -i $NOTIFY_ICON \
			"You should update soon" "$UPDATES New packages"
		elif (( UPDATES > 2 )); then
		    notify-send -u low -i $NOTIFY_ICON \
			"$UPDATES New packages"
		fi
	    fi		
	fi
	exit 0
}


#=== FUNCTION ==================================================================
# NAME: install
# DESCRIPTION: install the script
#===============================================================================
function install {
	[ "$(id -u)" -ne 0 ] && { echo "Must run as root" 1>&2; exit 1; }

	echo "Copying $(basename $0) to $install_file"
	[ "$install_file" = "$(readlink -f $0)" ] || cp "$0" "$install_file" 
	chmod +x "$install_file"

	echo "Creating symblink in /etc/cron.$cron_when" 
	rm "/etc/cron.$cron_when/$(basename $install_file)" &> /dev/null
	ln -s "$install_file" "/etc/cron.$cron_when"  || exit 1
	
	touch "$updates_file"
	chmod a+w "$updates_file"

	exit 
}

#=== FUNCTION ==================================================================
# NAME: update
# DESCRIPTION: uninstall the script
#===============================================================================
function uninstall {
	[ "$(id -u)" -ne 0 ] && { echo "Must run as root" 1>&2; exit 1; }
	echo "Deleting $install_file..."
	rm "$install_file"
	echo "Deleting symblink /etc/cron.$cron_when/$(basename $install_file)..."
	rm "/etc/cron.$cron_when/$(basename $install_file)"
	echo "Deleting $updates_file..."
	rm "$updates_file"
	exit 
}



#=== FUNCTION ==================================================================
# NAME: help
# DESCRIPTION: Show command help
#===============================================================================
function help() {
	echo -e 'Checks apt updates and show it to user in dunst taskbar
Usage: '$(basename $0)' -[huc]
   \e[1m-h\e[0m\tShow command help
   \e[1m-i\e[0m\tStart interactive upgrade
   \e[1m-m\e[0m\tOutput message for exector tint2
   \e[1m-u\e[0m\tMake apt update and check for new packages updates
   \e[1m-I\e[0m\tInstall the script (copy and link to cron.$cron_when)
   \e[1m-U\e[0m\tUninstall
	'
	exit 0
}



while getopts ":himuIU" o
do
	case $o in
		h) help ;;
		i) interactive_upgrade ;;
		m) tint2_executor_msg ;;
		I) install ;;
		U) uninstall ;;
		u) ;; # UPDATE DEFAULT
	esac
done
update 		# DEFAULT
