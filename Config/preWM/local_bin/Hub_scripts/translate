#!/usr/bin/env bash
#
# Description: Translate using Google Translate (through Lingva Translate)
# Dependencies: rofi and curl

# Set with the flags "-e", "-u","-o pipefail" cause the script to fail
# if certain things happen, which is a good thing.  Otherwise, we can
# get hidden bugs that are hard to discover.
set -euo pipefail

source "$HOME/.local/bin/config/config.ini"

cp2cb() {
  case "$XDG_SESSION_TYPE" in
    'x11') xclip -r -selection clipboard;;
    'wayland') wl-copy -n;; 
    *) err "Unknown display server";; 
  esac
}

# dm-translate config

# dm-translate currently supports two translation services, LibreTranslate and Lingva Translate.
# LibreTranslate uses the free software (Expat/MIT licensed) Argos Translate library for translation.
# Lingva Translate uses the Google Translate (dis)service for translation, but this is fully server-side and Google will not see your IP.
# Both are free software services that can be self-hosted.
# If you want more languages (or need a specific language not in the Argos library) you should chose Lingva Translate.
# If you want to get away from Google and/or want a fully free software implementation you should use LibreTranslate.
# The choice is yours...
#translate_service="libretranslate"
translate_service="lingva"
libretranslate_instance="https://libretranslate.de"
lingva_instance="https://lingva.ml"
# Uncomment to manually set the languages translate will show
# LibreTranslate languages:
#   - `curl -Ss "https://libretranslate.de/languages" | jq`
# Lingva Translate languages:
#   - `curl -Ss "https://lingva.ml/api/v1/languages/source" | jq`
# from_code=es
# to_code=en


main() {
  # Declare Services and their 
  declare -A translate_services
  translate_services[libretranslate]="https://libretranslate.de"
  translate_services[lingva]="https://lingva.ml"

  declare -A translate_languages_url    
  translate_languages_url[libretranslate]="https://libretranslate.de/languages"
  translate_languages_url[lingva]="https://lingva.ml/api/v1/languages/source"

  # Sanity checks.
  if [[ ! -v translate_service ]]; then
    echo 'translate_service not defined defaulting to "lingva"'
    declare translate_service="lingva"
  fi

  lang_map="/tmp/$translate_service"

  if [ -f "$lang_map" ]; then
  	if [ "$(stat -c %y "$lang_map" 2>/dev/null | cut -d' ' -f1)" = "$(date '+%Y-%m-%d')" ]; then
  		local url=${translate_languages_url["${translate_service}"]}
  		curl -Ss "$url" | sed -e 's/","name":"/ /g' -e 's/"},{"code":"/\n/g' -e 's/\[{"code":"//g' -e 's/}]//g' -e 's/{"languages"://g' -e 's/"}//g' > $lang_map
  	fi
  else
  	local url=${translate_languages_url["${translate_service}"]}
  	curl -Ss "$url" | sed -e 's/","name":"/ /g' -e 's/"},{"code":"/\n/g' -e 's/\[{"code":"//g' -e 's/}]//g' -e 's/{"languages"://g' -e 's/"}//g' > $lang_map
  fi  
 
  if [[ ! -v translate_mode ]]; then
  	# Get the languages to translate from and to
  	from_name=$(cat "$lang_map" | sort | ${rofi_command} -p 'Translate from:') "$@" || exit 1
  	from_code=$(echo "$from_name" | awk '{print $1;}')
  	
  	to_name=$(cat "$lang_map" | sort | ${rofi_command} -p 'Translate to:') "$@" || exit 1
  	to_code=$(echo "$to_name" | awk '{print $1;}')
  fi
  # Get text to translate and url encode 
  query=$(echo "" | ${rofi_command} -p "Translate (${from_code} -> ${to_code}):")
  query="$($SCRIPT_DIR/encode ${query})"
  query="$(echo "${query}%0A")"
  
  declare -A translate_query translate_method

  translate_method[libretranslate]="POST"
  translate_query[libretranslate]="https://libretranslate.de/translate?q=${query}&source=${from_code}&target=${to_code}"

  
  translate_method[lingva]="GET"
  translate_query[lingva]="https://lingva.ml/api/v1/${from_code}/${to_code}/${query}"


  translation_url=${translate_query[${translate_service}]}
  translation_method=${translate_method[${translate_service}]}

  if [[ "${translation_method}" == "POST" ]]; then
    translation=$(curl -X "${translation_method}" -Ss "${translation_url}")
  else 
    translation=$(curl -Ss "${translation_url}")
  fi
  
  translation="$(echo "$translation" | sed -e 's/{"translation":"//g' -e 's/"}//g')"
  
  # Copy translation to clipboard and send notification
  echo "${translation}"
  echo "${translation}" | cp2cb 
  notify-send "Translation (in clipboard)" "$translation"
}

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "$@"
